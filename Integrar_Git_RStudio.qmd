---
title: "Passos para integrar RStudio e Github"
lang: pt
format: html
toc: TRUE
toc-location: left
---

---

## 1.Instalar os programas do ecossistema de reprodutibilidade do R:

-   R: <https://cran.r-project.org>
-   RStudio: <https://posit.co/download/rstudio-desktop/>
-   Quarto: <https://quarto.org/docs/get-started/>  
Mini-tutorial do Quarto:   <https://rpubs.com/camargo/MiniTutorialQuarto>

## 2.Instalar os pacotes no R:

```{.r}
install.packages('usethis','gitcreds','devtools', 'markdown','rmarkdown','knitr')
```

O pacote `tinytex` do R serve para instalar toda a infra-estrutura para lidar com PDFs.  

```{.r}
install.packages('tinytex')
tinytex::install_tinytex()
```


## 3. Desativar .RData e . Rhistory no RStudio

O RStudio grava todos os objetos (incluindo datasets) no arquivo oculto **.RData** e todos os comandos usados na IDE no arquivo **.Rhistory**.

Estes arquivos podem chegar a tamanhos de muitos gigabytes e por isso devem ser desativados.  

Para isso, é preciso entrar nas configurações do RStudio e fazer as seguintes modificações:

`Tools < Global Options < General`

![](images/RStudio1.png)

## 4. Criar uma conta gratuita no Github

<https://github.com/>

`Guarde muito bem seu nome de usuário e senha do Github.`

## 5. Instalar o Git

Git: <https://git-scm.com/download/>

Teste a instalção do Git no terminal do Windows.  
Procure por cmd e no prompt do terminal digite:

```{.r}
git --version
```

## 6. Configurar o Git

- Gravar no Git o nome de usuário e email

Através do pacote `usethis` podemos configurar o Git diretamente do RStudio. 

Vamos agora informar seu nome do usuário no Github e seu email usado para abrir a conta. Isso só é feito uma vez.

```{.r}
usethis::use_git_config(
  user.name = "SEU NOME NO GITHUB",
  user.email = "seu_email_no@gmail.com"
```

- Crie um Personal Access Token (PAT)

De uns tempos para cá o Github aperfeiçoou o método de autenticação no site, de modo que a senha do usuário foi substituída por um `token` chamado PAT.

O PAT também pode ser criado dentro do RStudio usando o pacote `usethis`. 

```{.r}
usethis::create_github_token()
```

Uma janela do navegador irá se abrir e você precisará informar o nome do usuário do Github e a senha.  


![](images/Novo_PAT_do_Github.png)

Escreva um nome para o token e escolha uma data de validade para ele. Deixe todo o resto das opções como estão e pressione o botão `Generate token`.

:::{.callout-caution}
> ATENÇÃO:   

Copie e guarde o token `AGORA`. Você não terá outra chance! No entanto, um novo token pode ser criado a qualquer momento. 
:::

- Atribuir o PAT ao Git para sempre

Usando o pacote gitcreds, você pode informar o Git seu recém-criado PAT e você não mais precisará informá-lo toda vez que atualizar o Github. 

```{.r}
gitcreds::gitcreds_set()
```

Um prompt na janela de console do R dentro do RStudio vai pedir:

`? Enter password or token:`

Cole o token recém-copiado e pronto, estamos quase lá!

Para conferir se está tudo certo, digite:

```{.r}
usethis::git_sitrep()
```

:::{.callout-caution}
> PRONTO!   

O seu RStudio está configurado para manipular arquivos do Github e criar sites inteiros usando o `Quarto`.
:::

## 7. Criar um novo repositório do Github

Entre na página inicial do Github e na parte duperior da tela à esquerda pressione o botão `NEW`.

Dê um nome para o novo repositório e pressione `Add a README file`. Mantenha o repositório como público para que posteriormente possamos transformá-lo num site.

![](images/Novo_reposit.png)

Pronto! O novo repositório foi criado e já pode ser acessado pelo RStudio. Para isso, pressione o botão `< > Code` e depois o botão `Copiar`.  

![](images/CopiarHTTPS.png)

## 8. Criar um novo projeto no RStudio

Um projeto no RStudio serve para agregar vários arquivos em um único diretório, que poderão ser manipulados mais facilmente.

No RStudio, entre em `File<New project`.

Na próxima tela, você poderá escolher entre criar um novo projeto num novo diretório, num diretório existente ou usando `controle de versões`, no caso, o Git. 



![](images/Novo_Proj.png)


Em `Repository URL`, cole o a URL copiada lá no Github. O nome do novo diretório sugerido irá aparecer no outro campo. Por fim, escolha uma pasta onde uma cópia local do repositório será copiado.


![](images/Novo_Proj2.png)

O que aconteceu foi que o RStudio baixou todos os arquivos do repositório recém-criado no Github e agora você pode modificá-los localmente a atualizá-los remotamente.

Pronto! Você está com tudo pronto para começar a criar conteúdo para o seu repositório do Github.

Na aba `Files` do RStudio, clique  no arquivo `README.md`.

Este é um arquivo Markdown e portanto aceita toda a formatação do RMArkdown que já vimos.


```{.r}
## Teste de repositório

### Autor

Este é apenas um repositório de test.
```

Para testá-lo, pressione `Preview` ou Ctrl+Shift+K.

## 9. Sincronizar os arquivos locais com os arquivos remotos do Github.

A sincronização dos arquivos não é tão simples quanto poderia ser, mas lembre-se que estamos lidando com um sistema (Git) que serve para versionamento de programas que podem ser manipulados por muitas pessoas,e por isso temos que aprender o seu funcionamento.

Quando estamos com um projeto aberto no RStudio, aparece uma aba chamada `Git`, que é a partir de onde faremos as transferências dos arquivos.

Todos os arquivos modificados aparecem ali. Clique em todos eles.

![](images/Tela_Git.png)

Depois pressione o botão `Commit`. Na nomenclatura Git, Commit significa gravar no disco as modificações, de forma preparar todos os arquivos para serem enviados ao Github. 

A seguinte tela vai aparecer:

![](images/Tela_Commit.png)

Antes de pressionar o botão `Commit`, você é obrigado a escreve alguma coisa em `Commit message`, caso contrário o processo será abortado. Isso é uma forma de obrigá-lo a documentar toda e qualquer mudança nos códigos.

Depois de pressionar o botão `Commit`, uma tela de comando vai aparecer e pode ser fechada.

A operação de enviar os arquivos para o Github, ou seja, fazer um upload, é chamada no linguajar do Git de `PUSH`. PULL seria a operação oposto, de download de uma versão modificada no site, e é muito importante baixar as versões modificadas antes de começar a trabalhar quando existem muitas pessoas modificando o arquivo simultaneamente.

Pressione então o botão `Push` e verifique lá na página do seu repositório do Github se as modificações foram efetuadas.

![](images/Tela_Atualizada.png)

## 10. Criando um site completo usange Git pages

Inicialmente, crie um arquivo novo do tipo Quarto document, em `File<New file<Quarto document...`. O documento vem com o template padrão do Quarto, então faça algumas modificações.

Salve este arquivo `OBRIGRATORIAMENTE` com o nome de `index.qmd` no diretório do projeto.

Pressione o botão `Render` ou Ctrl+Shift+K para renderizar o arquivo .qmd e criar o arquivo .html.

Faça um `Commit` e depois um `Push`, conforme explicado anteriormente.




## 11. Referências (todas os sites foram criados com RStudio)
-   Curso-r: <https://curso-r.github.io/zen-do-r/>
-   R for data science: <https://r4ds.had.co.nz/>

